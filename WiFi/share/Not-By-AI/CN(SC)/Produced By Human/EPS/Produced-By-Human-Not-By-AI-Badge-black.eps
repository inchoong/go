%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.7.4 (Build 20G1120) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 131 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 131 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0.64355201 42 m
115.78671 42 l
123.7957 42 130.2867 35.508129 130.2867 27.500031 c
130.2867 1.326031 l
15.143502 1.326031 l
7.1354222 1.326031 0.64355201 7.8179312 0.64355201 15.826031 c
0.64355201 42 l
h
W
0 0 131 43 rc
-0.35644799 43 m
131.2867 43 l
131.2867 0.326031 l
-0.35644799 0.326031 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 131 43 rc
1 0 0 -1 0.64355201 42 cm
0 0 m
115.14315 0 l
123.15215 0 129.64314 6.491869 129.64314 14.499969 c
129.64314 40.673969 l
14.49995 40.673969 l
6.4918699 40.673969 0 34.182068 0 26.173969 c
0 0 l
h
S
Q
1 1 1 sc
q
48.426804 27.137331 m
49.564201 26.764931 50.711803 26.281731 51.396301 25.899231 c
52.010303 26.42263 l
51.275501 26.805132 50.037403 27.278231 48.899902 27.640631 c
48.426804 27.137331 l
h
43.031303 28.44593 m
43.031303 27.801731 l
51.970001 27.801731 l
51.970001 28.44593 l
43.031303 28.44593 l
h
43.313202 34.28426 m
43.313202 33.629971 l
51.708302 33.629971 l
51.708302 34.28426 l
43.313202 34.28426 l
h
45.940403 27.640631 m
45.266003 27.20783 43.917202 26.694431 42.840103 26.432732 c
43.001102 26.291731 43.252804 26.030031 43.363503 25.87903 c
44.440601 26.160931 45.789501 26.684332 46.635002 27.197731 c
45.940403 27.640631 l
h
44.833202 31.797932 m
44.833202 31.324831 l
50.067501 31.324831 l
50.067501 31.797932 l
44.833202 31.797932 l
h
44.833202 30.73093 m
44.833202 30.237732 l
50.067501 30.237732 l
50.067501 30.73093 l
44.833202 30.73093 l
h
44.833202 29.633732 m
44.833202 29.150532 l
50.067501 29.150532 l
50.067501 29.633732 l
44.833202 29.633732 l
h
44.480904 32.9958 m
44.480904 28.14393 l
45.205601 28.14393 l
45.205601 32.46233 l
49.795803 32.46233 l
49.795803 28.14393 l
50.550701 28.14393 l
50.550701 32.9958 l
44.480904 32.9958 l
h
47.762402 35.119751 m
47.017502 35.119751 l
47.017502 32.734081 l
47.762402 32.734081 l
47.762402 35.119751 l
h
W
0 0 131 43 rc
41.840103 36.119751 m
53.010303 36.119751 l
53.010303 24.87903 l
41.840103 24.87903 l
h
f
Q
q
57.134003 35.099621 m
57.0937 33.549442 57.154102 28.627131 52.956501 26.503132 c
53.188004 26.342131 53.439701 26.110632 53.570602 25.909231 c
57.848602 28.20433 57.929203 33.317921 57.969402 35.099621 c
57.134003 35.099621 l
h
57.878803 33.861492 m
57.154102 33.78096 l
57.295002 32.905212 57.707703 27.811731 61.693901 25.949532 c
61.804604 26.160931 62.0261 26.42263 62.247501 26.593731 c
58.382202 28.315031 57.969402 33.13673 57.878803 33.861492 c
h
W
0 0 131 43 rc
51.956501 36.099621 m
63.247501 36.099621 l
63.247501 24.909231 l
51.956501 24.909231 l
h
f
Q
q
64.351402 34.57618 m
64.351402 33.881622 l
72.092201 33.881622 l
72.092201 34.57618 l
64.351402 34.57618 l
h
63.918503 34.57618 m
63.918503 31.72743 l
63.918503 30.167231 63.827904 28.003031 62.942101 26.462931 c
63.133404 26.392431 63.455502 26.201231 63.596401 26.080431 c
64.522499 27.690931 64.663399 30.086731 64.663399 31.72743 c
64.663399 34.57618 l
63.918503 34.57618 l
h
66.314201 30.73093 m
70.521904 30.73093 l
70.521904 29.774632 l
66.314201 29.774632 l
66.314201 30.73093 l
h
66.314201 32.230732 m
70.521904 32.230732 l
70.521904 31.29463 l
66.314201 31.29463 l
66.314201 32.230732 l
h
65.569405 32.83474 m
65.569405 29.180731 l
71.286903 29.180731 l
71.286903 32.83474 l
65.569405 32.83474 l
h
68.0355 29.663931 m
68.0355 26.714531 l
68.0355 26.593731 67.9953 26.553532 67.844299 26.54343 c
67.693298 26.54343 67.169899 26.54343 66.576004 26.553532 c
66.676605 26.36223 66.777306 26.080431 66.807503 25.889132 c
67.592606 25.889132 68.085899 25.889132 68.387901 25.99983 c
68.689804 26.110632 68.770401 26.311932 68.770401 26.704531 c
68.770401 29.663931 l
68.0355 29.663931 l
h
67.934898 33.770889 m
67.814102 33.408512 67.592606 32.905212 67.401405 32.542831 c
68.085899 32.401932 l
68.307304 32.713951 68.569099 33.187061 68.800606 33.64003 c
67.934898 33.770889 l
h
69.625999 28.335232 m
70.230003 27.690931 71.035202 26.78503 71.417801 26.251532 c
72.051903 26.644131 l
71.639198 27.16753 70.8339 28.04323 70.219902 28.657331 c
69.625999 28.335232 l
h
66.324303 28.677431 m
65.881401 28.003031 65.217003 27.238031 64.613106 26.72463 c
64.794304 26.623932 65.1063 26.42263 65.257301 26.311932 c
65.820999 26.855431 66.525604 27.701031 67.039001 28.435831 c
66.324303 28.677431 l
h
W
0 0 131 43 rc
61.942101 35.57618 m
73.092201 35.57618 l
73.092201 24.889132 l
61.942101 24.889132 l
h
f
Q
q
81.101402 34.978821 m
81.101402 26.875631 l
81.101402 26.694431 81.020805 26.634031 80.829605 26.623932 c
80.638306 26.613932 79.994102 26.60383 79.289505 26.634031 c
79.4002 26.432732 79.521004 26.100531 79.561203 25.909231 c
80.497398 25.909231 81.061104 25.919331 81.393303 26.040131 c
81.715401 26.160931 81.846199 26.372332 81.846199 26.875631 c
81.846199 34.978821 l
81.101402 34.978821 l
h
79.128403 33.962151 m
79.128403 28.365431 l
79.853203 28.365431 l
79.853203 33.962151 l
79.128403 33.962151 l
h
74.417503 31.45573 m
74.417503 30.781231 l
77.316505 30.781231 l
77.316505 31.45573 l
74.417503 31.45573 l
h
74.095299 31.45573 m
74.095299 27.127232 l
74.095299 26.24143 74.397301 26.020031 75.373703 26.020031 c
75.585098 26.020031 77.014503 26.020031 77.246002 26.020031 c
78.141899 26.020031 78.363403 26.412531 78.454002 27.811731 c
78.252602 27.852032 77.950699 27.972832 77.789604 28.10363 c
77.739304 26.895731 77.658699 26.684332 77.195702 26.684332 c
76.883705 26.684332 75.675705 26.684332 75.434105 26.684332 c
74.920799 26.684332 74.8302 26.754831 74.8302 27.137331 c
74.8302 31.45573 l
74.095299 31.45573 l
h
77.044701 31.45573 m
77.044701 31.33493 l
76.964203 29.694132 76.863503 29.090132 76.722603 28.919031 c
76.642105 28.838531 76.561501 28.818331 76.430702 28.818331 c
76.289803 28.818331 75.937401 28.82843 75.554901 28.868731 c
75.665703 28.687531 75.736099 28.415731 75.756302 28.214432 c
76.148804 28.194231 76.541405 28.194231 76.7528 28.214432 c
77.004402 28.234531 77.165504 28.294931 77.326599 28.476131 c
77.558105 28.727732 77.658699 29.402231 77.749306 31.15373 c
77.759399 31.244331 77.769501 31.45573 77.769501 31.45573 c
77.044701 31.45573 l
h
75.655602 34.203732 m
76.521301 33.297783 77.598305 32.039532 78.1017 31.27453 c
78.645203 31.78783 l
78.131905 32.542831 77.034599 33.740692 76.158905 34.626511 c
75.655602 34.203732 l
h
75.816605 35.119751 m
75.283104 33.82122 74.2061 32.422031 72.937698 31.506031 c
73.098801 31.39533 73.370605 31.133532 73.491402 30.982531 c
74.800003 31.999231 75.867004 33.428642 76.5112 34.90836 c
75.816605 35.119751 l
h
W
0 0 131 43 rc
71.937698 36.119751 m
82.846199 36.119751 l
82.846199 24.909231 l
71.937698 24.909231 l
h
f
Q
q
51.908302 21.275831 m
51.908302 19.11293 l
57.259602 19.11293 l
57.259602 21.275831 l
51.908302 21.275831 l
h
51.908302 13.777631 m
51.908302 11.614631 l
57.548 11.614631 l
57.548 13.777631 l
51.908302 13.777631 l
h
51.7481 17.510731 m
51.7481 15.411831 l
56.875103 15.411831 l
56.875103 17.510731 l
51.7481 17.510731 l
h
42.968102 21.275831 m
42.968102 19.11293 l
47.886803 19.11293 l
47.886803 21.275831 l
42.968102 21.275831 l
h
43.128304 17.510731 m
43.128304 15.411831 l
47.758701 15.411831 l
47.758701 17.510731 l
43.128304 17.510731 l
h
50.722702 23.166431 m
50.722702 8.0257311 l
53.061901 8.0257311 l
53.061901 23.166431 l
50.722702 23.166431 l
h
42.279202 13.761631 m
42.695702 11.438431 l
44.314003 11.694731 46.364803 12.015231 48.287403 12.335631 c
48.207302 14.386431 l
46.044304 14.146131 43.769203 13.889731 42.279202 13.761631 c
h
46.797302 23.166431 m
46.797302 15.620131 l
46.797302 13.841731 45.932201 10.781531 42.647701 9.5318308 c
43.208401 9.083231 43.929401 8.3622313 44.314003 7.8014312 c
48.239304 9.6920309 49.104504 12.848331 49.104504 15.652131 c
49.104504 23.166431 l
46.797302 23.166431 l
h
W
0 0 131 43 rc
41.279202 24.166431 m
58.548 24.166431 l
58.548 6.8014312 l
41.279202 6.8014312 l
h
f
Q
q
84.835304 20.458731 m
84.835304 18.183632 l
96.0186 18.183632 l
96.0186 20.458731 l
84.835304 20.458731 l
h
84.194405 15.732231 m
84.194405 13.489231 l
95.377701 13.489231 l
95.377701 15.732231 l
84.194405 15.732231 l
h
82.287804 10.733431 m
82.287804 8.4583311 l
96.867805 8.4583311 l
96.867805 10.733431 l
82.287804 10.733431 l
h
88.344101 23.246531 m
88.344101 9.6119308 l
90.779404 9.6119308 l
90.779404 23.246531 l
88.344101 23.246531 l
h
84.579002 23.08633 m
84.034203 20.92333 83.008804 18.728331 81.775101 17.414532 c
82.368004 17.094131 83.409401 16.405231 83.874001 16.004631 c
85.107704 17.54273 86.293304 20.058231 86.998299 22.541632 c
84.579002 23.08633 l
h
W
0 0 131 43 rc
80.775101 24.246531 m
97.867805 24.246531 l
97.867805 7.4583311 l
80.775101 7.4583311 l
h
f
Q
q
99.911705 17.206331 m
99.911705 15.091431 l
103.45271 15.091431 l
103.45271 17.206331 l
99.911705 17.206331 l
h
102.5717 17.206331 m
102.5717 16.869831 l
102.5397 13.953831 102.4917 12.896431 102.3157 12.640031 c
102.1867 12.479831 102.0427 12.431731 101.8347 12.431731 c
101.57771 12.431731 101.1297 12.447831 100.63271 12.495831 c
100.9697 11.919031 101.2257 11.005831 101.25771 10.316831 c
101.99471 10.316831 102.6677 10.332931 103.1007 10.413031 c
103.5807 10.509131 103.9497 10.669331 104.3017 11.134031 c
104.6867 11.646731 104.7667 13.120731 104.8147 16.389132 c
104.8147 16.645531 104.8307 17.206331 104.8307 17.206331 c
102.5717 17.206331 l
h
107.5547 22.125031 m
108.3877 21.612331 109.4767 20.843231 109.9577 20.298531 c
111.4637 21.852631 l
110.9027 22.38133 109.7817 23.08633 108.9647 23.51893 c
107.5547 22.125031 l
h
109.2207 18.119532 m
108.1797 14.498631 106.0807 11.614631 103.1007 9.9964314 c
103.5967 9.5478306 104.4457 8.5705309 104.7827 8.0738306 c
107.9067 10.044531 110.2457 13.393131 111.5757 17.558731 c
109.2207 18.119532 l
h
100.0237 21.019531 m
100.0237 18.728331 l
112.3607 18.728331 l
112.3607 21.019531 l
100.0237 21.019531 l
h
98.453903 21.019531 m
98.453903 16.212931 l
98.453903 14.114031 98.373802 11.278231 97.188202 9.3876314 c
97.716904 9.1152306 98.774399 8.2500315 99.174904 7.7854309 c
100.63271 9.9804306 100.9057 13.713531 100.9057 16.196932 c
100.9057 21.019531 l
98.453903 21.019531 l
h
104.8787 23.230532 m
104.91071 16.132832 106.1447 8.1379309 109.7657 8.1379309 c
111.4157 8.1379309 112.1687 8.8108311 112.5207 11.935131 c
111.89671 12.175431 111.0787 12.720131 110.5507 13.264931 c
110.4707 11.310231 110.2777 10.509131 109.9577 10.509131 c
108.5957 10.509131 107.1697 17.158232 107.3297 23.230532 c
104.8787 23.230532 l
h
W
0 0 131 43 rc
96.188202 24.51893 m
113.5207 24.51893 l
113.5207 6.7854309 l
96.188202 6.7854309 l
h
f
Q
q
63.438103 13.844031 m
67.064102 13.844031 l
65.280205 19.467331 l
63.438103 13.844031 l
h
63.622303 22.734631 m
66.9963 22.734631 l
72.057205 8.4437313 l
68.819 8.4437313 l
67.897903 11.381431 l
62.633404 11.381431 l
61.644501 8.4437313 l
58.522602 8.4437313 l
63.622303 22.734631 l
h
W
0 0 131 43 rc
57.522602 23.734631 m
73.057205 23.734631 l
73.057205 7.4437308 l
57.522602 7.4437308 l
h
f
Q
q
74.602905 8.4437313 2.9668 14.2909 rc
73.602905 23.734631 m
78.569702 23.734631 l
78.569702 7.4437308 l
73.602905 7.4437308 l
h
f
Q
q
72.842606 20.303732 6.2824001 2.4309001 rc
71.842606 23.734631 m
80.125 23.734631 l
80.125 19.303732 l
71.842606 19.303732 l
h
f
Q
q
72.842606 8.4404306 6.2824001 2.4309001 rc
71.842606 11.871331 m
80.125 11.871331 l
80.125 7.4404311 l
71.842606 7.4404311 l
h
f
Q
q
32.873802 21.324331 m
32.873802 16.078932 28.621601 11.826631 23.376202 11.826631 c
18.130802 11.826631 13.878602 16.078932 13.878602 21.324331 c
13.878602 26.569731 18.130802 30.821932 23.376202 30.821932 c
28.621601 30.821932 32.873802 26.569731 32.873802 21.324331 c
h
35.032303 21.324331 m
35.032303 14.886831 29.813702 9.668231 23.376202 9.668231 c
16.938702 9.668231 11.720202 14.886831 11.720202 21.324331 c
11.720202 27.76173 16.938702 32.98035 23.376202 32.98035 c
29.813702 32.98035 35.032303 27.76173 35.032303 21.324331 c
h
17.761602 18.630732 m
21.274702 15.785831 26.298903 15.785831 29.812002 18.630732 c
28.453703 20.30813 l
25.732601 18.104631 21.841002 18.104631 19.119902 20.30813 c
17.761602 18.630732 l
h
19.224703 22.32423 m
19.224703 25.240231 l
21.383102 25.240231 l
21.383102 22.32423 l
19.224703 22.32423 l
h
25.922302 25.240231 m
25.922302 22.32423 l
28.080702 22.32423 l
28.080702 25.240231 l
25.922302 25.240231 l
h
W*
0 0 131 43 rc
10.720202 33.98035 m
36.032303 33.98035 l
36.032303 8.668231 l
10.720202 8.668231 l
h
f
ep
end
%%Trailer
%%EOF
